# -*- coding: utf-8 -*-
"""VehicleDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oEF46aerE4szvtQIehHkv6idOS6Sr5dd

**Real-Time Vehicle Detection and Counting from Traffic Camera Images Using YOLOv5**


Description :
This project implements a vehicle counting system using a YOLOv5 deep learning model to classify and count vehicles from live traffic camera feeds. The system scrapes traffic camera images from a public website, processes each image to detect various vehicle types, and aggregates the counts over a specified duration.
"""

!pip install beautifulsoup4
!pip install requests
!pip install torch
!pip install pillow

import requests
from bs4 import BeautifulSoup
from PIL import Image
from io import BytesIO
import torch
import time

# Load YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5m', pretrained=True)

# Base URL for traffic cameras
base_url = "https://onemotoring.lta.gov.sg/content/onemotoring/home/driving/traffic_information/traffic-cameras"

# List of camera IDs
camera_ids = ['stg', 'mce', 'ecp', 'pie', 'kpe', 'cte', 'tpe', 'aye', 'bke', 'sle', 'wtc1', 'kje', 'wtc', 'ltm']

# Function to scrape image URLs from a specific traffic camera page
def get_traffic_image_urls(camera_id):
    try:
        # Construct the URL for each camera page
        camera_url = f"{base_url}/{camera_id}.html#trafficCameras"

        # Send a request to the traffic camera page
        response = requests.get(camera_url)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        # Find all image tags in the page
        image_tags = soup.find_all('img')

        # Extract the URLs for traffic camera images
        image_urls = []
        for img in image_tags:
            src = img['src']
            if src.startswith("//datamall.lta.gov.sg"):
                full_url = "https:" + src
                image_urls.append(full_url)

        print(f"Scraped image URLs for {camera_id}: {image_urls}")
        return image_urls
    except Exception as e:
        print(f"Error scraping the website for {camera_id}: {e}")
        return []

# Function to fetch and classify vehicles in each traffic image
def classify_vehicles_in_images(image_urls, total_vehicle_counts):
    for image_url in image_urls:
        try:
            print(f"Processing image: {image_url}")
            img_response = requests.get(image_url)
            img_response.raise_for_status()

            # Load image into PIL
            img = Image.open(BytesIO(img_response.content))

            # Perform inference using YOLOv5
            results = model(img)
            results.show()  # Displaying the image with detected objects

            # Classify based on the vehicle types
            vehicle_counts = {'car': 0, 'bus': 0, 'motorbike': 0, 'truck': 0}
            for result in results.xyxy[0]:
                label = int(result[-1])
                if label == 2:  # Car
                    vehicle_counts['car'] += 1
                elif label == 5:  # Bus
                    vehicle_counts['bus'] += 1
                elif label == 3:  # Motorbike
                    vehicle_counts['motorbike'] += 1
                elif label == 7:  # Truck
                    vehicle_counts['truck'] += 1

            print(f"Vehicle counts for {image_url}: {vehicle_counts}")

            # Update total counts
            for vehicle_type, count in vehicle_counts.items():
                total_vehicle_counts[vehicle_type] += count

        except Exception as e:
            print(f"Error processing image {image_url}: {e}")

# Initialize total vehicle counts
total_vehicle_counts = {'car': 0, 'bus': 0, 'motorbike': 0, 'truck': 0}

start_time = time.time()
duration = 2 * 60  # Run for 2 minutes

while time.time() - start_time < duration:
    for camera_id in camera_ids:
        # Scrape traffic camera image URLs for each camera location
        image_urls = get_traffic_image_urls(camera_id)

        if image_urls:
            # Classify vehicles in each image
            classify_vehicles_in_images(image_urls, total_vehicle_counts)
        else:
            print(f"No image URLs found for {camera_id}.")

    # Wait 30 seconds before fetching the next batch
    time.sleep(30)

# Print total vehicle counts at the end
print("Final Vehicle Counts:")
print(total_vehicle_counts)

"""**Summary**

This project effectively demonstrates the integration of web scraping and deep learning for real-time vehicle classification and counting from traffic camera images. The system is designed to run continuously for a specified time, gathering data on vehicle counts and providing a summary at the end. This could be valuable for traffic analysis, urban planning, and monitoring traffic patterns in real-time.


**Potential Enhancements**

Improved Error Handling: Implement more robust error handling to manage network issues or unexpected changes in the HTML structure.
Data Storage: Store the vehicle counts in a database or a CSV file for historical analysis.
Visualization: Create a dashboard to visualize real-time vehicle counts using tools like Streamlit or Dash.
Model Fine-tuning: Fine-tune the YOLOv5 model on a specific dataset to improve detection accuracy for the target environment.
"""